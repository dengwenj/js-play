/**
 * 缺点
 *  函数执行完后，函数内的局部变量没有释放，占用内存时间会变长
 *  容易造成内存泄露
 *  
 * 解决
 *  及时释放 赋值为 null
 */

function foo() {
  const a = 1
  return function () {
    console.log(a)
  }
}
let a = foo()
a()
// 让内部函数成为垃圾对象 -> 回收闭包
a = null

/**
 * 内存溢出
 *  当程序运行需要的内存超过了剩余的内存时，就抛出内存溢出的错误
 * 内存泄漏
 *  占用的内存没有及时释放
 *  内存泄漏积累多了就容易导致内存溢出
 *  常见的内存泄漏：
 *    意外的全局变量、没有及时清理定时器、闭包
 */
